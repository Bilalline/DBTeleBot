# DBTeleBot - Бот для анализа сообщений и интеграции с MediaWiki

## Описание проекта
Telegram бот для сбора информации из групповых чатов, сохранения в MediaWiki и анализа с помощью Ollama. Бот не отвечает в чаты, кроме группы для критичных ошибок. Основная цель - автоматическое создание и дополнение страниц MediaWiki на основе контекста сообщений из Telegram групп, используя анализ Ollama для структурирования и категоризации информации.

## Технические требования

1. Архитектура:
   - Асинхронная архитектура на Python 3.11+
   - Модульная структура с четким разделением ответственности
   - Docker для развертывания
   - Интеграция с внешним сервером Ollama

2. Компоненты:
   - База данных (SQLite):
     * Асинхронные операции с базой данных
     * Хранение информации о сообщениях
     * Отслеживание статуса обработки
   
   - Telegram клиент:
     * Подключение от имени пользователя (не бота)
     * Поддержка супергрупп через PeerChannel
     * Асинхронная обработка сообщений
   
   - MediaWiki клиент:
     * Асинхронное взаимодействие с API
     * Управление страницами и контентом
     * Форматирование и структурирование данных
   
   - Ollama клиент:
     * Взаимодействие с внешним сервером Ollama
     * Анализ текста сообщений
     * Извлечение ключевой информации

## Функциональные требования

1. Обработка сообщений:
   - Получение сообщений из Telegram группы
   - Анализ текста с помощью внешнего сервера Ollama
   - Сохранение результатов в MediaWiki
   - Отслеживание обработанных сообщений

2. Управление историей:
   - Обработка исторических сообщений
   - Пропуск уже обработанных сообщений
   - Сохранение метаданных сообщений

3. Интеграция с внешними сервисами:
   - Подключение к Telegram от имени пользователя
   - Взаимодействие с внешним сервером Ollama
   - Синхронизация с MediaWiki

## Требования к безопасности

1. Аутентификация:
   - Безопасное хранение сессии Telegram
   - Защита учетных данных MediaWiki
   - Безопасное подключение к внешнему серверу Ollama

2. Данные:
   - Шифрование чувствительных данных
   - Безопасное хранение сессий
   - Защита от утечек информации

## Требования к производительности

1. Оптимизация:
   - Асинхронная обработка сообщений
   - Эффективные запросы к базе данных
   - Оптимизированное взаимодействие с API

2. Масштабируемость:
   - Поддержка большого количества сообщений
   - Эффективная работа с историей
   - Оптимизированное использование ресурсов

## Требования к надежности

1. Обработка ошибок:
   - Корректная обработка сетевых ошибок
   - Восстановление после сбоев
   - Логирование всех операций

2. Мониторинг:
   - Подробное логирование
   - Отслеживание состояния компонентов
   - Уведомления об ошибках

## Требования к развертыванию

1. Docker:
   - Контейнеризация приложения
   - Управление зависимостями
   - Простота развертывания

2. Конфигурация:
   - Переменные окружения
   - Настройка внешних сервисов
   - Управление сессиями

## Требования к мониторингу

1. Логирование:
   - Подробные логи операций
   - Отслеживание ошибок
   - Мониторинг производительности

2. Отчетность:
   - Статистика обработки
   - Статус компонентов
   - Информация об ошибках

## Команды бота

### Основные команды
- `/start` - Начало работы с ботом
- `/help` - Справка по командам
- `/wiki` - Работа с MediaWiki
- `/ask` - Вопрос к Ollama

### Обработка сообщений
1. Сохранение в БД
2. Анализ через Ollama
3. Создание страницы в Wiki
4. Отправка подтверждения

## Развертывание

### Docker
```yaml
version: '3.8'
services:
  bot:
    build: .
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    env_file: .env
    restart: unless-stopped
```

### Запуск
```bash
docker-compose up -d
```

## Логирование
- Ротация логов ежедневно
- Хранение 7 дней
- Уровни: INFO, ERROR, DEBUG
- Формат: время | уровень | модуль | сообщение
- Расширенное логирование для отладки API

## Разработка

### Структура проекта
```
.
├── main.py           # Основной файл бота
├── database.py       # Работа с БД
├── wiki_client.py    # Клиент MediaWiki
├── ollama_client.py  # Клиент Ollama
├── docker-compose.yml
├── Dockerfile
├── requirements.txt
├── .env
└── README.md
```

### Тестирование
- Модульные тесты для каждого компонента
- Интеграционные тесты
- Тесты производительности

## Известные проблемы и решения

### 1. Авторизация Telegram
- Проблема: EOF при запросе кода в Docker
- Решение: Использование переменных окружения для хранения сессии

### 2. Обработка исторических сообщений
- Проблема: Дублирование сообщений
- Решение: Проверка существования сообщений перед добавлением

### 3. Интеграция с Ollama
- Проблема: Ошибки API
- Решение: Расширенное логирование и обработка ошибок

## Планы развития
1. Добавление поддержки других моделей Ollama
2. Расширение функционала MediaWiki
3. Улучшение анализа сообщений
4. Добавление веб-интерфейса
5. Интеграция с другими сервисами

## Лицензия
MIT

## Автор
Your Name 